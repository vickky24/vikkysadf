{
	"name": "dataflowcreditscore",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ASDB_SOURCECREDITSCORE",
						"type": "DatasetReference"
					},
					"name": "creditscoretable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ASDB_SINK_REJECTRECORDS",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_ASDB_SINK_TOPPERS",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "DS_ASDB_SINK_ALLCUST",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "windowrownumber"
				},
				{
					"name": "duplicatesrecords"
				},
				{
					"name": "select1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "uniquerecords"
				},
				{
					"name": "select2"
				},
				{
					"name": "windowrankdenserank"
				},
				{
					"name": "sort2"
				},
				{
					"name": "split1"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "sort3"
				},
				{
					"name": "sort4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Credit_Id as integer,",
				"          Card_Type as string,",
				"          Credit_Name as string,",
				"          Credit_Score as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> creditscoretable",
				"creditscoretable window(over(Credit_Score,",
				"          Card_Type,",
				"          Credit_Name),",
				"     asc(Credit_Id, true),",
				"     row_number = rowNumber()) ~> windowrownumber",
				"windowrownumber filter(greaterOrEqual(row_number,2)) ~> duplicatesrecords",
				"duplicatesrecords select(mapColumn(",
				"          Credit_Id,",
				"          Card_Type,",
				"          Credit_Name,",
				"          Credit_Score",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sort(asc(Credit_Id, true),",
				"     partitionBy('hash', 1)) ~> sort1",
				"windowrownumber filter(equals(row_number,1)) ~> uniquerecords",
				"uniquerecords select(mapColumn(",
				"          Credit_Id,",
				"          Card_Type,",
				"          Credit_Name,",
				"          Credit_Score",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 window(over(Card_Type),",
				"     desc(Credit_Score, true),",
				"     rank = rank(),",
				"          dense_rank = denseRank(),",
				"          row_number = rowNumber()) ~> windowrankdenserank",
				"windowrankdenserank sort(asc(dense_rank, true)) ~> sort2",
				"sort2 split(equals(dense_rank,1),",
				"     disjoint: true) ~> split1@(toppers, allcustomers)",
				"split1@toppers select(mapColumn(",
				"          Credit_Id,",
				"          Card_Type,",
				"          Credit_Name,",
				"          Credit_Score",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"split1@allcustomers select(mapColumn(",
				"          Credit_Id,",
				"          Card_Type,",
				"          Credit_Name,",
				"          Credit_Score",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 sort(asc(Credit_Id, true),",
				"     partitionBy('hash', 1)) ~> sort3",
				"select3 sort(asc(Credit_Id, true)) ~> sort4",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"sort4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"sort3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
			]
		}
	}
}